{
	"info": {
		"_postman_id": "38c1d206-6bc4-4279-bfa0-43abd1b84c21",
		"name": "http-monitoring",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21889110"
	},
	"item": [
		{
			"name": "Login with already existing account",
			"item": [
				{
					"name": "create existing user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"username\", \"mey\");\r",
									"pm.variables.set(\"password\", \"123456\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Request failed successfully with 400\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(400);\r",
									"});\r",
									"\r",
									"const alreadyTakenPhrase = 'already taken';\r",
									"pm.test(`Response says '${alreadyTakenPhrase}'`, function () {\r",
									"    pm.expect(pm.response.text()).to.include(alreadyTakenPhrase);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "login existing user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logged in successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is text\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set(\"token\", pm.response.text());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create User and Url",
			"item": [
				{
					"name": "create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"username\", pm.variables.replaceIn(\"{{$randomFirstName}}\") + pm.variables.replaceIn(\"{{$randomInt}}\"))\r",
									"pm.variables.set(\"password\", pm.variables.replaceIn(\"{{$randomPassword}}\"))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"User created successfully\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"var data = pm.response.json();\r",
									"pm.test(\"Same username is returned\", function () {\r",
									"    pm.expect(data).to.haveOwnProperty(\"username\");\r",
									"    pm.expect(data.username).to.equal(pm.variables.get(\"username\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logged in successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is text\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", pm.response.text());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all urls (empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var urlList = pm.response.json()\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Returned list is empty\", function () {\r",
									"    pm.expect(pm.response.json().length).to.eql(0);\r",
									"});\r",
									"\r",
									"// create urls to be tested\r",
									"pm.variables.set(\"urlsToBeCreated\", pm.iterationData.get(\"value\").urls);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/urls",
							"host": [
								"{{url}}"
							],
							"path": [
								"urls"
							]
						}
					},
					"response": []
				},
				{
					"name": "create url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST request is successfull\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"// loop on {{urlToBeCreated}} and create all\r",
									"\r",
									"var urlsToBeCreated = pm.variables.get(\"urlsToBeCreated\")\r",
									"\r",
									"if (urlsToBeCreated.length <= 0) {\r",
									"    postman.setNextRequest(\"get all urls (full)\")\r",
									"} else {\r",
									"    postman.setNextRequest(\"create url\")\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pop one url\r",
									"var urlsToBeCreated = pm.variables.get(\"urlsToBeCreated\")\r",
									"const thisUrl = urlsToBeCreated.pop();\r",
									"pm.variables.set(\"urlsToBeCreated\", urlsToBeCreated);\r",
									"\r",
									"pm.variables.set(\"thisUrl\", thisUrl.url);\r",
									"pm.variables.set(\"thisUrlThreshold\", thisUrl.threshold);\r",
									"pm.variables.set(\"thisUrlInterval\", thisUrl.interval);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"url\": \"{{thisUrl}}\",\r\n    \"threshold\": {{thisUrlThreshold}},\r\n    \"interval\": \"{{thisUrlInterval}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/urls",
							"host": [
								"{{url}}"
							],
							"path": [
								"urls"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all urls (full)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var urlList = pm.response.json()\r",
									"\r",
									"pm.test(\"Url is list not empty\", function () {\r",
									"    pm.expect(urlList.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"// test all urls\r",
									"urlList.forEach(function (u) {\r",
									"    console.log(u)\r",
									"    pm.test(\"Url has id\", function () {\r",
									"        pm.expect(u).to.have.property(\"id\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.variables.set(\"urlsToBeChecked\", urlList);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/urls",
							"host": [
								"{{url}}"
							],
							"path": [
								"urls"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check stat change",
			"item": [
				{
					"name": "get stats",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var urlsToBeChecked = pm.variables.get(\"urlsToBeChecked\");\r",
									"\r",
									"var thisUrlId = urlsToBeChecked.pop()[\"id\"];\r",
									"pm.variables.set(\"thisUrlId\", thisUrlId);\r",
									"\r",
									"pm.variables.set(\"urlsToBeChecked\", urlsToBeChecked);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"stats = pm.response.json();\r",
									"\r",
									"stats.forEach(function (s) {\r",
									"        pm.test(\"Stats have the specified schema\", function () {\r",
									"        var schema = {\r",
									"            \"properties\": {\r",
									"                \"date\": {\r",
									"                    \"day\": {\"type\": \"number\"},\r",
									"                    \"month\": {\"type\": \"number\"},\r",
									"                    \"year\": {\"type\": \"number\"}\r",
									"                },\r",
									"                \"success_count\": {\"type\": \"number\"},\r",
									"                \"failure_count\": {\"type\": \"number\"}\r",
									"            }\r",
									"        };\r",
									"        pm.expect(s).to.have.jsonSchema(schema);\r",
									"    });\r",
									"});\r",
									"\r",
									"var urlsToBeChecked = pm.variables.get(\"urlsToBeChecked\");\r",
									"\r",
									"if (urlsToBeChecked.length > 0) {\r",
									"    postman.setNextRequest(\"get stats\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/urls/{{thisUrlId}}/stats",
							"host": [
								"{{url}}"
							],
							"path": [
								"urls",
								"{{thisUrlId}}",
								"stats"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check for new Alert",
			"item": [
				{
					"name": "get alert",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/alerts/6326b539218bf2c0697bb5e9",
							"host": [
								"{{url}}"
							],
							"path": [
								"alerts",
								"6326b539218bf2c0697bb5e9"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:3000"
		},
		{
			"key": "token",
			"value": ""
		}
	]
}